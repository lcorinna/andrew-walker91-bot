const cron = require('node-cron');
const express = require('express');
const app = express();

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const ADMIN_ID = 271223425;

// Express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('Bot is alive!'));
app.listen(PORT, () => console.log(`Web server running on port ${PORT}`));

// –ü—É—Ç–∏
const imageDir = path.join(__dirname, 'images');
const statsPath = path.join(__dirname, 'stats.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const imageFiles = fs.existsSync(imageDir)
  ? fs.readdirSync(imageDir).filter(file => /\.(jpg|jpeg|png|gif)$/i.test(file))
  : [];

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
function loadStats() {
  if (!fs.existsSync(statsPath)) return { triggerCount: 0, chats: {} };
  return JSON.parse(fs.readFileSync(statsPath, 'utf-8'));
}

function saveStats(stats) {
  fs.writeFileSync(statsPath, JSON.stringify(stats, null, 2));
}

// /start ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
bot.onText(/^\/start$/, (msg) => {
  if (msg.chat.type === 'private') {
    const intro = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤ —Å—Ç–∏–ª–µ @andrew_walker91. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–≤–æ '–¥–∞' üëÄ\n\n‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ /about, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ.";
    bot.sendMessage(msg.chat.id, intro);
  }
});

// /about ‚Äî –∏–Ω—Ñ–æ –æ–± –∞–≤—Ç–æ—Ä–µ
bot.onText(/^\/about$/, (msg) => {
  if (msg.chat.type === 'private') {
    const message = `üë§ –ê–≤—Ç–æ—Ä: @gaydaychuk\nüí¨ –ù–∞—à–ª–∏ –±–∞–≥? –ï—Å—Ç—å –∏–¥–µ–∏? –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É!`;
    bot.sendMessage(msg.chat.id, message);
  }
});

// /stats ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ –ª–∏—á–∫–µ
bot.onText(/^\/stats$/, (msg) => {
  if (msg.from.id !== ADMIN_ID || msg.chat.type !== 'private') return;

  const stats = loadStats();
  const lines = Object.entries(stats.chats).map(([id, name]) => `‚Ä¢ ${name} (${id})`);

  const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°—Ä–∞–±–æ—Ç–∞–ª: ${stats.triggerCount} —Ä–∞–∑
–ß–∞—Ç–æ–≤: ${lines.length}

üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:
${lines.join('\n')}`;

  bot.sendMessage(msg.chat.id, text);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–¥–∞" –∏–ª–∏ "da"
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim().toLowerCase();

  if (/^(–¥–∞|da)$/i.test(text)) {
    const replyOptions = msg.message_id ? { reply_to_message_id: msg.message_id } : {};

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = loadStats();
    stats.triggerCount += 1;

    if (!stats.chats[chatId]) {
      const chatName =
        msg.chat.title ||
        msg.chat.username ||
        `${msg.chat.first_name || ''} ${msg.chat.last_name || ''}`.trim() ||
        '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

      stats.chats[chatId] = chatName;
    }

    saveStats(stats);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π
    const random = Math.random();
    try {
      if (random < 0.5 || imageFiles.length === 0) {
        await bot.sendMessage(chatId, '–ø–∏–∑–¥–∞', replyOptions);
      } else {
        const randomImage = imageFiles[Math.floor(Math.random() * imageFiles.length)];
        const imagePath = path.join(imageDir, randomImage);
        await bot.sendPhoto(chatId, fs.createReadStream(imagePath), replyOptions);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:', error.message);
    }
  }
});

// üóìÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ stats.json –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 11:00 UTC
cron.schedule('0 11 * * 0', () => {
  const filePath = path.join(__dirname, 'stats.json');
  if (fs.existsSync(filePath)) {
    bot.sendDocument(ADMIN_ID, filePath, {
      caption: 'üì¶ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    });
  }
});
