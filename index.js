const cron = require('node-cron');
const express = require('express');
const app = express();
const https = require('https');
const axios = require('axios');

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const ADMIN_ID = 271223425;

// Express-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('Bot is alive!'));
app.listen(PORT, () => console.log(`Web server running on port ${PORT}`));

// –ü—É—Ç–∏
const imageDir = path.join(__dirname, 'images');
const statsPath = path.join(__dirname, 'stats.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const imageFiles = fs.existsSync(imageDir)
  ? fs.readdirSync(imageDir).filter(file => /\.(jpg|jpeg|png|gif)$/i.test(file))
  : [];

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
function loadStats() {
  if (!fs.existsSync(statsPath)) return { triggerCount: 0, chats: {}, reactionCounters: {} };
  const data = JSON.parse(fs.readFileSync(statsPath, 'utf-8'));
  if (!data.reactionCounters) data.reactionCounters = {};
  return data;
}

function saveStats(stats) {
  fs.writeFileSync(statsPath, JSON.stringify(stats, null, 2));
}

// /start ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
bot.onText(/^\/start$/, (msg) => {
  if (msg.chat.type === 'private') {
    const intro = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤ —Å—Ç–∏–ª–µ @andrew_walker91. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–≤–æ '–¥–∞' üëÄ\n\n‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ /about, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ.";
    bot.sendMessage(msg.chat.id, intro);
  }
});

// /about ‚Äî –∏–Ω—Ñ–æ –æ–± –∞–≤—Ç–æ—Ä–µ
bot.onText(/^\/about$/, (msg) => {
  if (msg.chat.type === 'private') {
    const message = `üë§ –ê–≤—Ç–æ—Ä: @gaydaychuk\nüí¨ –ù–∞—à–ª–∏ –±–∞–≥? –ï—Å—Ç—å –∏–¥–µ–∏? –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É!`;
    bot.sendMessage(msg.chat.id, message);
  }
});

// /stats ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤ –ª–∏—á–∫–µ
bot.onText(/^\/stats$/, (msg) => {
  if (msg.from.id !== ADMIN_ID || msg.chat.type !== 'private') return;

  const stats = loadStats();
  const lines = Object.entries(stats.chats).map(([id, name]) => `‚Ä¢ ${name} (${id})`);

  const text = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–°—Ä–∞–±–æ—Ç–∞–ª: ${stats.triggerCount} —Ä–∞–∑
–ß–∞—Ç–æ–≤: ${lines.length}

üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:
${lines.join('\n')}`;

  bot.sendMessage(msg.chat.id, text);
});

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
async function handleMessage(msg, isEdit = false) {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const rawText = msg.text || '';
  const cleanedText = rawText.trim();

  const validYesForms = new Set([
    '–¥–∞', '–î–∞', '–î–ê', '–¥–ê',
    'da', 'Da', 'DA', 'dA',
    '–¥a', '–îa', '–îA', '–¥A',
    'd–∞', 'D–∞', 'D–ê', 'd–ê'
  ]);

  const stats = loadStats();

  // –†–µ–∞–∫—Ü–∏—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞
  if (!stats.reactionCounters) stats.reactionCounters = {};
  if (!stats.reactionCounters[chatId]) {
    stats.reactionCounters[chatId] = {
      current: 0,
      target: 1// Math.floor(Math.random() * 401) + 100
    };
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
  const counter = stats.reactionCounters[chatId];
  counter.current++;

  // –ï—Å–ª–∏ –ø–æ—Ä–∞ —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
  if (counter.current >= counter.target) {
    try {
      await axios.post(`https://api.telegram.org/bot${token}/setMessageReaction`, {
        chat_id: chatId,
        message_id: messageId,
        reaction: [{ type: "emoji", emoji: "üíò" }]
      });
      console.log(`üíò –†–µ–∞–∫—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç–µ ${chatId} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId})`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: ${err.message}`);
    }
    counter.current = 0;
    counter.target = 1 //Math.floor(Math.random() * 401) + 100;
  }

  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–¥–∞"
  if (!validYesForms.has(cleanedText)) {
    saveStats(stats);
    return;
  }

  const replyOptions = messageId ? { reply_to_message_id: messageId } : {};

  stats.triggerCount += 1;

  if (!stats.chats[chatId]) {
    const chatName =
      msg.chat.title ||
      msg.chat.username ||
      `${msg.chat.first_name || ''} ${msg.chat.last_name || ''}`.trim() ||
      '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    stats.chats[chatId] = chatName;
  }

  saveStats(stats);
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: –ø–∏–∑–¥–∞ / pizda / –∫–∞—Ä—Ç–∏–Ω–∫–∞
  try {
    const options = ['–ø–∏–∑–¥–∞', 'pizda', ...imageFiles];
    const randomChoice = options[Math.floor(Math.random() * options.length)];

    if (typeof randomChoice === 'string' && imageFiles.includes(randomChoice)) {
      const imagePath = path.join(imageDir, randomChoice);
      await bot.sendPhoto(chatId, fs.createReadStream(imagePath), replyOptions);
    } else {
      await bot.sendMessage(chatId, randomChoice, replyOptions);
    }

    if (isEdit) {
      console.log(`üîÑ –°—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:', error.message);
  }
}

// –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', (msg) => {
  handleMessage(msg, false);
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('edited_message', (msg) => {
  handleMessage(msg, true);
});

// Self-ping –¥–ª—è Render
setInterval(() => {
  https.get('https://andrew-walker91-bot.onrender.com', (res) => {
    console.log(`Self-ping status: ${res.statusCode}`);
  }).on('error', (e) => {
    console.error('Self-ping error:', e);
  });
}, 10 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

// üóìÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ stats.json –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00 UTC
cron.schedule('0 4 * * 0', () => {
  const filePath = path.join(__dirname, 'stats.json');
  if (fs.existsSync(filePath)) {
    bot.sendDocument(ADMIN_ID, filePath, {
      caption: 'üì¶ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    });
  }
});
